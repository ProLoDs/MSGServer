# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import service as _service
from google.protobuf import service_reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from networking.requests import messages_pb2 as networking_dot_requests_dot_messages__pb2
networking_dot_data__pb2 = networking_dot_requests_dot_messages__pb2.networking_dot_data__pb2
from networking import responses_pb2 as networking_dot_responses__pb2
networking_dot_data__pb2 = networking_dot_responses__pb2.networking_dot_data__pb2
networking_dot_responses_dot_messages__pb2 = networking_dot_responses__pb2.networking_dot_responses_dot_messages__pb2
networking_dot_data__pb2 = networking_dot_responses__pb2.networking_dot_data__pb2

from networking.requests.messages_pb2 import *
from networking.responses_pb2 import *

DESCRIPTOR = _descriptor.FileDescriptor(
  name='service.proto',
  package='networking.service',
  syntax='proto3',
  serialized_pb=_b('\n\rservice.proto\x12\x12networking.service\x1a\"networking.requests.messages.proto\x1a\x1anetworking.responses.proto\"\x1b\n\x0bpingMessage\x12\x0c\n\x04ping\x18\x01 \x01(\x05\"\x1b\n\x0bpongMessage\x12\x0c\n\x04pong\x18\x01 \x01(\x05\x32\xc4\x04\n\x13MessengerAPIService\x12Y\n\x08register\x12-.networking.requests.messages.RegisterRequest\x1a\x1e.networking.responses.Response\x12_\n\x0bsendMessage\x12\x30.networking.requests.messages.SendMessageRequest\x1a\x1e.networking.responses.Response\x12_\n\x0bgetMessages\x12\x30.networking.requests.messages.GetMessagesRequest\x1a\x1e.networking.responses.Response\x12_\n\x0bgetUserInfo\x12\x30.networking.requests.messages.GetUserInfoRequest\x1a\x1e.networking.responses.Response\x12\x65\n\x0e\x66indUserByName\x12\x33.networking.requests.messages.FindUserByNameRequest\x1a\x1e.networking.responses.Response\x12H\n\x04ping\x12\x1f.networking.service.pingMessage\x1a\x1f.networking.service.pongMessageB\x18\n\x10networking.proto\x88\x01\x01\x90\x01\x01P\x00P\x01\x62\x06proto3')
  ,
  dependencies=[networking_dot_requests_dot_messages__pb2.DESCRIPTOR,networking_dot_responses__pb2.DESCRIPTOR,],
  public_dependencies=[networking_dot_requests_dot_messages__pb2.DESCRIPTOR,networking_dot_responses__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PINGMESSAGE = _descriptor.Descriptor(
  name='pingMessage',
  full_name='networking.service.pingMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ping', full_name='networking.service.pingMessage.ping', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=101,
  serialized_end=128,
)


_PONGMESSAGE = _descriptor.Descriptor(
  name='pongMessage',
  full_name='networking.service.pongMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pong', full_name='networking.service.pongMessage.pong', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=130,
  serialized_end=157,
)

DESCRIPTOR.message_types_by_name['pingMessage'] = _PINGMESSAGE
DESCRIPTOR.message_types_by_name['pongMessage'] = _PONGMESSAGE

pingMessage = _reflection.GeneratedProtocolMessageType('pingMessage', (_message.Message,), dict(
  DESCRIPTOR = _PINGMESSAGE,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:networking.service.pingMessage)
  ))
_sym_db.RegisterMessage(pingMessage)

pongMessage = _reflection.GeneratedProtocolMessageType('pongMessage', (_message.Message,), dict(
  DESCRIPTOR = _PONGMESSAGE,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:networking.service.pongMessage)
  ))
_sym_db.RegisterMessage(pongMessage)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\020networking.proto\210\001\001\220\001\001'))

_MESSENGERAPISERVICE = _descriptor.ServiceDescriptor(
  name='MessengerAPIService',
  full_name='networking.service.MessengerAPIService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=160,
  serialized_end=740,
  methods=[
  _descriptor.MethodDescriptor(
    name='register',
    full_name='networking.service.MessengerAPIService.register',
    index=0,
    containing_service=None,
    input_type=networking_dot_requests_dot_messages__pb2._REGISTERREQUEST,
    output_type=networking_dot_responses__pb2._RESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='sendMessage',
    full_name='networking.service.MessengerAPIService.sendMessage',
    index=1,
    containing_service=None,
    input_type=networking_dot_requests_dot_messages__pb2._SENDMESSAGEREQUEST,
    output_type=networking_dot_responses__pb2._RESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getMessages',
    full_name='networking.service.MessengerAPIService.getMessages',
    index=2,
    containing_service=None,
    input_type=networking_dot_requests_dot_messages__pb2._GETMESSAGESREQUEST,
    output_type=networking_dot_responses__pb2._RESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getUserInfo',
    full_name='networking.service.MessengerAPIService.getUserInfo',
    index=3,
    containing_service=None,
    input_type=networking_dot_requests_dot_messages__pb2._GETUSERINFOREQUEST,
    output_type=networking_dot_responses__pb2._RESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='findUserByName',
    full_name='networking.service.MessengerAPIService.findUserByName',
    index=4,
    containing_service=None,
    input_type=networking_dot_requests_dot_messages__pb2._FINDUSERBYNAMEREQUEST,
    output_type=networking_dot_responses__pb2._RESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='ping',
    full_name='networking.service.MessengerAPIService.ping',
    index=5,
    containing_service=None,
    input_type=_PINGMESSAGE,
    output_type=_PONGMESSAGE,
    options=None,
  ),
])

MessengerAPIService = service_reflection.GeneratedServiceType('MessengerAPIService', (_service.Service,), dict(
  DESCRIPTOR = _MESSENGERAPISERVICE,
  __module__ = 'service_pb2'
  ))

MessengerAPIService_Stub = service_reflection.GeneratedServiceStubType('MessengerAPIService_Stub', (MessengerAPIService,), dict(
  DESCRIPTOR = _MESSENGERAPISERVICE,
  __module__ = 'service_pb2'
  ))


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class MessengerAPIServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.register = channel.unary_unary(
          '/networking.service.MessengerAPIService/register',
          request_serializer=networking_dot_requests_dot_messages__pb2.RegisterRequest.SerializeToString,
          response_deserializer=networking_dot_responses__pb2.Response.FromString,
          )
      self.sendMessage = channel.unary_unary(
          '/networking.service.MessengerAPIService/sendMessage',
          request_serializer=networking_dot_requests_dot_messages__pb2.SendMessageRequest.SerializeToString,
          response_deserializer=networking_dot_responses__pb2.Response.FromString,
          )
      self.getMessages = channel.unary_unary(
          '/networking.service.MessengerAPIService/getMessages',
          request_serializer=networking_dot_requests_dot_messages__pb2.GetMessagesRequest.SerializeToString,
          response_deserializer=networking_dot_responses__pb2.Response.FromString,
          )
      self.getUserInfo = channel.unary_unary(
          '/networking.service.MessengerAPIService/getUserInfo',
          request_serializer=networking_dot_requests_dot_messages__pb2.GetUserInfoRequest.SerializeToString,
          response_deserializer=networking_dot_responses__pb2.Response.FromString,
          )
      self.findUserByName = channel.unary_unary(
          '/networking.service.MessengerAPIService/findUserByName',
          request_serializer=networking_dot_requests_dot_messages__pb2.FindUserByNameRequest.SerializeToString,
          response_deserializer=networking_dot_responses__pb2.Response.FromString,
          )
      self.ping = channel.unary_unary(
          '/networking.service.MessengerAPIService/ping',
          request_serializer=pingMessage.SerializeToString,
          response_deserializer=pongMessage.FromString,
          )


  class MessengerAPIServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def register(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def sendMessage(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getMessages(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getUserInfo(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def findUserByName(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_MessengerAPIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'register': grpc.unary_unary_rpc_method_handler(
            servicer.register,
            request_deserializer=networking_dot_requests_dot_messages__pb2.RegisterRequest.FromString,
            response_serializer=networking_dot_responses__pb2.Response.SerializeToString,
        ),
        'sendMessage': grpc.unary_unary_rpc_method_handler(
            servicer.sendMessage,
            request_deserializer=networking_dot_requests_dot_messages__pb2.SendMessageRequest.FromString,
            response_serializer=networking_dot_responses__pb2.Response.SerializeToString,
        ),
        'getMessages': grpc.unary_unary_rpc_method_handler(
            servicer.getMessages,
            request_deserializer=networking_dot_requests_dot_messages__pb2.GetMessagesRequest.FromString,
            response_serializer=networking_dot_responses__pb2.Response.SerializeToString,
        ),
        'getUserInfo': grpc.unary_unary_rpc_method_handler(
            servicer.getUserInfo,
            request_deserializer=networking_dot_requests_dot_messages__pb2.GetUserInfoRequest.FromString,
            response_serializer=networking_dot_responses__pb2.Response.SerializeToString,
        ),
        'findUserByName': grpc.unary_unary_rpc_method_handler(
            servicer.findUserByName,
            request_deserializer=networking_dot_requests_dot_messages__pb2.FindUserByNameRequest.FromString,
            response_serializer=networking_dot_responses__pb2.Response.SerializeToString,
        ),
        'ping': grpc.unary_unary_rpc_method_handler(
            servicer.ping,
            request_deserializer=pingMessage.FromString,
            response_serializer=pongMessage.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'networking.service.MessengerAPIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaMessengerAPIServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def register(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def sendMessage(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getMessages(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getUserInfo(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def findUserByName(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ping(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaMessengerAPIServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def register(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    register.future = None
    def sendMessage(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    sendMessage.future = None
    def getMessages(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getMessages.future = None
    def getUserInfo(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    getUserInfo.future = None
    def findUserByName(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    findUserByName.future = None
    def ping(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    ping.future = None


  def beta_create_MessengerAPIService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('networking.service.MessengerAPIService', 'findUserByName'): networking_dot_requests_dot_messages__pb2.FindUserByNameRequest.FromString,
      ('networking.service.MessengerAPIService', 'getMessages'): networking_dot_requests_dot_messages__pb2.GetMessagesRequest.FromString,
      ('networking.service.MessengerAPIService', 'getUserInfo'): networking_dot_requests_dot_messages__pb2.GetUserInfoRequest.FromString,
      ('networking.service.MessengerAPIService', 'ping'): pingMessage.FromString,
      ('networking.service.MessengerAPIService', 'register'): networking_dot_requests_dot_messages__pb2.RegisterRequest.FromString,
      ('networking.service.MessengerAPIService', 'sendMessage'): networking_dot_requests_dot_messages__pb2.SendMessageRequest.FromString,
    }
    response_serializers = {
      ('networking.service.MessengerAPIService', 'findUserByName'): networking_dot_responses__pb2.Response.SerializeToString,
      ('networking.service.MessengerAPIService', 'getMessages'): networking_dot_responses__pb2.Response.SerializeToString,
      ('networking.service.MessengerAPIService', 'getUserInfo'): networking_dot_responses__pb2.Response.SerializeToString,
      ('networking.service.MessengerAPIService', 'ping'): pongMessage.SerializeToString,
      ('networking.service.MessengerAPIService', 'register'): networking_dot_responses__pb2.Response.SerializeToString,
      ('networking.service.MessengerAPIService', 'sendMessage'): networking_dot_responses__pb2.Response.SerializeToString,
    }
    method_implementations = {
      ('networking.service.MessengerAPIService', 'findUserByName'): face_utilities.unary_unary_inline(servicer.findUserByName),
      ('networking.service.MessengerAPIService', 'getMessages'): face_utilities.unary_unary_inline(servicer.getMessages),
      ('networking.service.MessengerAPIService', 'getUserInfo'): face_utilities.unary_unary_inline(servicer.getUserInfo),
      ('networking.service.MessengerAPIService', 'ping'): face_utilities.unary_unary_inline(servicer.ping),
      ('networking.service.MessengerAPIService', 'register'): face_utilities.unary_unary_inline(servicer.register),
      ('networking.service.MessengerAPIService', 'sendMessage'): face_utilities.unary_unary_inline(servicer.sendMessage),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_MessengerAPIService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('networking.service.MessengerAPIService', 'findUserByName'): networking_dot_requests_dot_messages__pb2.FindUserByNameRequest.SerializeToString,
      ('networking.service.MessengerAPIService', 'getMessages'): networking_dot_requests_dot_messages__pb2.GetMessagesRequest.SerializeToString,
      ('networking.service.MessengerAPIService', 'getUserInfo'): networking_dot_requests_dot_messages__pb2.GetUserInfoRequest.SerializeToString,
      ('networking.service.MessengerAPIService', 'ping'): pingMessage.SerializeToString,
      ('networking.service.MessengerAPIService', 'register'): networking_dot_requests_dot_messages__pb2.RegisterRequest.SerializeToString,
      ('networking.service.MessengerAPIService', 'sendMessage'): networking_dot_requests_dot_messages__pb2.SendMessageRequest.SerializeToString,
    }
    response_deserializers = {
      ('networking.service.MessengerAPIService', 'findUserByName'): networking_dot_responses__pb2.Response.FromString,
      ('networking.service.MessengerAPIService', 'getMessages'): networking_dot_responses__pb2.Response.FromString,
      ('networking.service.MessengerAPIService', 'getUserInfo'): networking_dot_responses__pb2.Response.FromString,
      ('networking.service.MessengerAPIService', 'ping'): pongMessage.FromString,
      ('networking.service.MessengerAPIService', 'register'): networking_dot_responses__pb2.Response.FromString,
      ('networking.service.MessengerAPIService', 'sendMessage'): networking_dot_responses__pb2.Response.FromString,
    }
    cardinalities = {
      'findUserByName': cardinality.Cardinality.UNARY_UNARY,
      'getMessages': cardinality.Cardinality.UNARY_UNARY,
      'getUserInfo': cardinality.Cardinality.UNARY_UNARY,
      'ping': cardinality.Cardinality.UNARY_UNARY,
      'register': cardinality.Cardinality.UNARY_UNARY,
      'sendMessage': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'networking.service.MessengerAPIService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
